{
  "name": "grunt-import",
  "description": "Inline file importer with @import command.",
  "version": "1.0.3",
  "homepage": "https://github.com/marcinrosinski/grunt-import",
  "author": {
    "name": "Marcin Rosinski",
    "url": "https://twitter.com/marcinrosinski"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/marcinrosinski/grunt-import.git"
  },
  "bugs": {
    "url": "https://github.com/marcinrosinski/grunt-import/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/marcinrosinski/grunt-import/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": ">=0.4.0",
    "grunt-contrib-jshint": ">=0.2.0",
    "grunt-contrib-nodeunit": ">=0.1.2",
    "grunt-contrib-clean": ">=0.4.0",
    "grunt-contrib-internal": ">=0.4.2"
  },
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "contributors": [
    {
      "name": "-Marcin Rosinski",
      "url": "http://twitter.com/marcinrosinski"
    }
  ],
  "readme": "# grunt-import\n\n> Inline file importer with @import command.\n\n**Syntax - add `@import \"path/to/file\";` into any of your files to get it imported/injected into that placeholder.**\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-import --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-import');\n```\n\n\n\n\n## Importer task\n_Run this task with the `grunt import` command._\n\nTask targets, files and options may be specified according to the Grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Options\n\n#### banner\nType: `String`\nDefault: empty string\n\nThis string will be prepended to the beginning of the output. It is processed using [grunt.template.process][], using the default options.\n\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\n\n#### footer\nType: `String`\nDefault: empty string\n\nThis string will be appended to the end of the output. It is processed using [grunt.template.process][], using the default options.\n\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\n\n#### indent\nType: `Boolean`\nDefault: false\n\nIf true, any whitespace preceding the @import statement will be preserved and the all of the imported content will be automatically indented. \n\n### Usage Examples\n\n**To include a file into another file add `@import \"path/to/another/file\";` at any point inside your importing/source file.**\n\n#### Including external libs\n\nIn this example, running `grunt import:dist` (or `grunt import` because `grunt-import` is a [multi task][multitask]) will parse `src/intro.js` file writing the output to `dist/intro.js`\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  import: {\n    options: {},\n    dist: {\n      src: 'src/intro.js',\n      dest: 'dist/intro.js',\n    }\n  }\n});\n```\n\nIn this example, running `grunt import:dist` will parse `build/foo.js` and write `dist/foo.js`, and parse `build/bar.js` and write `dist/bar.js`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  import: {\n    dist: {\n      files: {\n        'dist/foo.js': 'src/foo.js',\n        'dist/bar.js': 'src/bar.js',\n      }\n    }\n  }\n});\n```\n\n#### Running Importer with Uglify after import\n\nIn this example, running `grunt watch:js` will parse `src/intro.js` file writing the output to `stage/intro.js` and followup with the Uglify task writing output into `dist/intro.js`\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  import: {\n    options: {},\n    dist: {\n      src: 'src/intro.js',\n      dest: 'stage/intro.js',\n    },\n    tasks: ['uglify:dist']\n  },\n  uglify: {\n    dist: {\n      src: 'stage/intro.js',\n      dest: 'dist/intro.js',\n    }\n  }\n});\n```\n\n#### Running Importer with Watch and Uglify after file changed\n\nIn this example, running `grunt watch:js` will listen to any changes to the `src/intro.js` after which it will run `import:dist` task followed by `uglify:dist`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  watch: {\n    js: {\n      files: ['src/intro.js'],\n      tasks: ['import:dist']\n    }\n  }\n  import: {\n    options: {},\n    dist: {\n      src: 'src/intro.js',\n      dest: 'stage/intro.js',\n    }\n    tasks: ['uglify:dist']\n  },\n  uglify: {\n    dist: {\n      src: 'stage/intro.js',\n      dest: 'dist/intro.js',\n    }\n  }\n});\n```\n\n### Running Importer on a directory\n\nIn this example any .js file in ```src/``` will be parsed and outputted to ```dist/```\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  import: {\n    options: {},\n    dist: {\n      expand: true,\n      cwd: 'src/',\n      src: '*.js',\n      dest: 'dist/',\n      ext: '.js'\n    }\n  }\n});\n```\n\n#### Intercepting events\n\nYou can listen to import events emitted by `grunt.import` using:\n\n```js\ngrunt.event.on('import', function(action, filepath, target) {\n  //your code\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "grunt-import@1.0.3",
  "_from": "grunt-import@"
}
